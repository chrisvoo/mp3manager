#!/usr/bin/env node

const program = require('commander');
const _ = require('underscore');
require('colors');

function setEnvironment(env) {
    if (!/^(test|production)$/i.test(env)) {
        console.error(`Wrong environment: ${env}. Must be "test" or "production"`.red);
        process.exit(1);
    }

    process.env.NODE_ENV = env;
}

program.version('1.0.0', '--version');
program
    .command('scan <dir> [otherDirs...]')
    .description('It recursively scan a tree of directories, storing all the MP3 information in the database')
    .option('-e, --env <env>', 'The environment', 'test')
    .option('-v, --verbose', 'Logs verbosity', (v, total) => total + 1, 0)
    .option('-d, --dry-run', 'Keeps results in memory without storing them in the db')
    .option('-r, --recreate-db', 'It recreates the database for the specified env, deleting everyth')
    .action(async (dir, otherDirs, options) => {
        const { env } = options;

        if (otherDirs) {
            otherDirs.push(dir);
        }

        setEnvironment(env);
        const App = require('./App');

        const result = await new App({
            ...options,
            command: 'scan',
            paths: otherDirs,
        }).run();
        
        if (_.isEmpty(result)) {
            return;
        }

        if (!_.isEmpty(result.errors)) {
            console.error(result.red);
        }
    });
    
program
    .command('install')
    .description('It creates the database and its users (test|prod) with your root account')
    .option('-e, --env <env>', 'The environment', 'test')
    .option('-v, --verbose', 'Logs verbosity', (v, total) => total + 1, 0)
    .option('-u, --user <user>', "A user with the privileges to create the db's structure", 'root')
    .option('-p, --password <password>', "The MySQL user's password")
    .action(async (options) => {
        const { env, user, password } = options;
        
        setEnvironment(env);
        const App = require('./App');

        if (_.isEmpty(user) || _.isEmpty(password)) {
            console.error('Please provide the credentials for a MySQL privileged user'.red);
            process.exit(1);
        }

        const result = await new App({
            ...options,
            command: 'install',
        }).run();

        if (result === true) {
            console.log(`Database for ${env} successfully created!`.green);
        } else {
            // reason logged by App to stdout
            console.log('Failure'.red);
        }
        process.exit(0);
    })
    .on('--help', () => {
        console.log('Examples:');
        console.log();
        console.log(' $ ./mm install -u root -p mypass                  # It build the test database');
        console.log(' $ ./mm install -u root -p mypass -e production    # it builds the production db');
        console.log();
    });

program.on('command:*', () => {
    console.error(`Invalid command: ${program.args.join(' ')}`.red);
    program.help();
    process.exit(1);
});

if (process.argv.length === 2) {
    program.help();
    process.exit(1);
}

program.parse(process.argv);

process.on('warning', (e) => console.warn(e.stack));
