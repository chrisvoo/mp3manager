#!/usr/bin/env node 

const program = require('commander');
const _ = require('underscore');
require('colors');

function setEnvironment(env) {
    if (!/^(test|production)$/i.test(env)) {
        console.error(`Wrong environment: ${env}. Must be "test" or "production"`.red);
        process.exit(1);
    }

    process.env.NODE_ENV = env;
}

program.version('1.0.0', '--version');
program
    .command('scan <dir> [otherDirs...]')
    .description('Recursive scan of the file system, storing MP3 info in the database')
    .option('-e, --env <env>', 'The environment', 'production')
    .option('-v, --verbose', 'Logs verbosity', (v, total) => total + 1, 0)
    .option('-d, --dry-run', 'Keeps results in memory without storing them in the db')
    .action(async (dir, otherDirs, options) => {
        const { env } = options;

        if (otherDirs) {
            otherDirs.push(dir);
        }

        setEnvironment(env);
        const App = require('./App');

        const result = await new App({
            ...options,
            command: 'scan',
            paths: otherDirs,
        }).run();

        if (!_.isEmpty(result.errors)) {
            console.error(result.red);
        }

        console.log('Result', result);
        process.exit(1);
    });

program.on('command:*', () => {
    console.error(`Invalid command: ${program.args.join(' ')}`.red);
    program.help();
    process.exit(1);
});

if (process.argv.length === 2) {
    program.help();
    process.exit(1);
}

program.parse(process.argv);

process.on('warning', (e) => console.warn(e.stack));
